import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ–∫–µ–Ω –∏ ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('API_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# FSM –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
class Form(StatesGroup):
    name = State()
    contact = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
apply_btn = InlineKeyboardMarkup().add(InlineKeyboardButton("üì© –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply"))

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands='start')
async def send_welcome(message: types.Message):
    photo_url = "https://via.placeholder.com/600x400.png?text=–î–æ–±—Ä–æ+–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å"
    await bot.send_photo(message.chat.id, photo_url,
        caption="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=apply_btn)

# –ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
@dp.callback_query_handler(lambda c: c.data == 'apply')
async def process_callback_apply(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = callback_query.from_user.id
    if await dp.current_state(user=user_id).get_state() is not None:
        await callback_query.answer("‚ùå –¢—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏!")
        return

    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, "üìù –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await Form.next()
    await message.answer("üìû –û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email):")

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
@dp.message_handler(state=Form.contact)
async def process_contact(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data['name']
    contact = message.text

    text = f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n\nüë§ –ò–º—è: {name}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\nüÜî @{message.from_user.username}"
    await bot.send_message(ADMIN_ID, text)

    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è.")
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
